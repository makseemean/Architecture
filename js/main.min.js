// PRELOADER

let div = document.createElement('div');

div.style.overflowY = 'scroll';
div.style.width = '50px';
div.style.height = '50px';

document.body.append(div);
let scrollWidth = div.offsetWidth - div.clientWidth;

div.remove();

function addBodyStyles() {
   document.body.style.overflow = 'hidden';
   document.body.style.paddingRight = `${scrollWidth}px`;
}

function removeBodyStyles() {
   document.body.style.overflow = '';
   document.body.style.paddingRight = '0';
}

let preloader = document.querySelector('.preloader');
addBodyStyles();

document.body.onload = () => {
   setTimeout(() => {
      if (!preloader.classList.contains('preloader_done')) {
         preloader.classList.add('preloader_done');
         setTimeout(removeBodyStyles, 500);
      }
   }, 1000);
}

// MENU

const menuOpen = document.querySelector('.menu-btn'),
   menuClose = document.querySelector('.menu__close'),
   menu = document.querySelector('.header__menu'),
   menuLinks = document.querySelectorAll('.menu__list-link');

menu.addEventListener('click', (e) => {
   if (e.target && e.target.classList.contains('menu__list-link')) {
      menu.classList.remove('header__menu_active');
      removeBodyStyles();
   }
});

menuLinks.forEach(link => {
   link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = link.getAttribute('href');

      const targetElement = document.querySelector(targetId);

      if (targetElement) {
         const offsetTop = targetElement.offsetTop;
         const scrollOptions = {
            behavior: 'smooth'
         };
         window.scrollTo({
            top: offsetTop,
            ...scrollOptions
         });
      }
   });
});

menuOpen.addEventListener('click', () => {
   menu.classList.add('header__menu_active');
   addBodyStyles();
});

menuClose.addEventListener('click', () => {
   menu.classList.remove('header__menu_active');
   removeBodyStyles();
});

// SLIDER

const slides = document.querySelectorAll('.slider__item'),
   sliderArrowPrev = document.querySelector('.slider__arrow_up'),
   sliderArrowNext = document.querySelector('.slider__arrow_down'),
   sliderBtns = document.querySelectorAll('.slider__btn');

let index = 0;

function toggleSlide(index) {
   slides.forEach(slide => slide.classList.remove('slider__item_active'));
   slides[index].classList.add('slider__item_active');

   sliderBtns.forEach(btn => btn.classList.remove('slider__btn_active'));
   sliderBtns[index].classList.add('slider__btn_active');
   sliderArrowNext.classList.remove("slider__arrow_flash");
}

sliderArrowPrev.addEventListener('click', () => {
   index === 0 ? index = slides.length - 1 : index--;
   toggleSlide(index);
});

sliderArrowNext.addEventListener('click', () => {
   index === slides.length - 1 ? index = 0 : index++;
   toggleSlide(index);
});

sliderBtns.forEach((btn, i) => {
   btn.addEventListener('click', () => {
      toggleSlide(i);
      index = i;
   });
});

// SELECT

const selects = document.querySelectorAll('.select'),
   selectValues = document.querySelectorAll('.select__value');

function toggleSelect(i) {
   if (selects[i].classList.contains('select_active')) {
      closeSelect();
   } else {
      closeSelect();
      openSelect(i);
   }
}

function openSelect(i) {
   selects[i].classList.add('select_active');
}

function closeSelect() {
   selects.forEach(select => select.classList.remove('select_active'))
}

selects.forEach((select, i) => {
   select.addEventListener('click', (e) => {
      const { type } = e.target.dataset;

      if (type === 'input') {
         toggleSelect(i);
      } else if (type === 'item') {
         selectValues[i].innerText = e.target.innerText;
         selectValues[i].dataset.value = e.target.dataset.value;
         closeSelect();
      } else if (type === 'overlay') {
         closeSelect();
      }
   });
})

document.addEventListener('click', (e) => {
   if (!e.target.closest('.select')) {
      closeSelect();
   }
});

// RANGE

const rangeSliders = document.querySelectorAll('.range__slider'),
   rangeCurrent = document.querySelectorAll('.range__value-current'),
   rangeNames = document.querySelectorAll('.price__name');

rangeSliders.forEach((rangeSlider, i) => {
   rangeSlider.addEventListener('input', (e) => {
      rangeCurrent[i].innerText = e.target.value;
   });
});

// CALC

const calcBtn = document.querySelector('.price__btn-calc'),
   resetBth = document.querySelector('.price__btn-reset');

const modal = document.querySelector('.modal'),
   modalClose = document.querySelector('.modal__close-btn'),
   modalInner = document.querySelector('.modal__inner');

modal.addEventListener('click', (e) => {
   if (e.target && e.target.classList.contains('modal__overlay')) {
      closeModal();
   }
});

document.addEventListener('keypress', (e) => {
   if (e.target && e.target == 27) {
      closeModal();
   }
});

function showModal(content) {
   addBodyStyles();
   modalInner.innerHTML = content;
   modal.classList.add('modal_active');
}

function closeModal() {
   removeBodyStyles();
   modalInner.innerHTML = '';
   modal.classList.remove('modal_active');
}

let calcValues = [];

const calcValuesError = `
   <div class="modal__header">
      <h4 class="modal__title">Помилка</h4>
      <button onclick="closeModal()" class="modal__close-btn">
         <img class="modal__close-icon" src="img/icons/modal_close_icon.svg" alt="close">
      </button>
   </div>
   <div class="modal__content">
      <div class="modal__text">
         Виберіть всі значення для розрахунку приблизної ціни
      </div>
   </div>  
`;

calcBtn.addEventListener('click', (e) => {
   let isShowError = false;

   rangeSliders.forEach((rangeSlider, i) => {
      calcValues[rangeSlider.dataset.name] = {
         name: rangeNames[i].innerText,
         value: rangeSlider.value,
         text: rangeSlider.value
      }
   });

   selectValues.forEach((selectValue) => {
      if (selectValue.innerText == selectValue.dataset.text) {
         if (!isShowError) {
            isShowError = true;
            showModal(calcValuesError);
         }
      } else {
         calcValues[selectValue.dataset.name] = {
            name: selectValue.dataset.text,
            value: selectValue.dataset.value,
            text: selectValue.innerText
         }
      }
   });
   if (!isShowError) {
      let calcValuesString = '',
         calcValuesText = `<div class="modal__header">
            <h4 class="modal__title">Приблизна ціна</h4>
            <button onclick="closeModal()" class="modal__close-btn">
               <img class="modal__close-icon" src="img/icons/modal_close_icon.svg" alt="close">
            </button>
         </div>
      `;
      for (const key in calcValues) {
         calcValuesString += `
            <div class="modal__text modal__text_flex">
               ${calcValues[key].name}: <span>${calcValues[key].text}</span> 
            </div>
         `;
      }
      calcValuesText += `
            <div class="modal__content">
               ${calcValuesString}
            </div>
            <div class="modal__sum">
               Сума: ${((calcValues.levels.value * 25000) * ((calcValues.fills.value / 100) + 1)).toFixed(0)}$
            <div>
         `;
      showModal(calcValuesText);
   }
});

// RESET VALUES

function resetFilter() {
   selectValues.forEach((selectValue) => {
      selectValue.innerText = selectValue.dataset.text;
   });
   rangeSliders.forEach((rangeSlider, i) => {
      rangeSlider.value = 1;
      rangeCurrent[i].innerText = 1;
   });
}

resetBth.addEventListener('click', () => {
   resetFilter();
});